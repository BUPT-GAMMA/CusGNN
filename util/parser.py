import argparse

def str2bool(v):
    return v.lower() in ['t', 'true', True]

def get_student_args():
    parser = argparse.ArgumentParser("Catalog search")
    parser.add_argument('--experiment_name', type=str, default='part_prediction', help='experiment_name')
    parser.add_argument('--catalog_name', type=str, default='catA', help='catalog name')
    parser.add_argument('--embedding_size', type=str, default='one_hot', help='embedding type')
    parser.add_argument('--data_location', type=str, default='./data/', help='data path')
    parser.add_argument('--dropout', type=float, default=0.3, help='dropout for model')
    parser.add_argument('--embedding_keyword', type=str, default='embedding', help='data path')
    parser.add_argument('--record_time', action='store_true', default=False, help='used for run_with_record_time func')
    parser.add_argument('--batch_size', type=int, default=1024, help='batch size')
    parser.add_argument('--eval_batch_size', type=int, default=1024, help='eval batch size')
    parser.add_argument('--learning_rate', type=float, default=0.0005, help='init learning rate')
    parser.add_argument('--learning_rate_min', type=float, default=0.00005, help='min learning rate')
    parser.add_argument('--weight_decay', type=float, default=0.00002, help='weight decay')
    parser.add_argument('--gpu', type=int, default=1, help='gpu device id')
    parser.add_argument('--max_epochs', type=int, default=500, help='num of training epochs')
    # parser.add_argument('--model_path', type=str, default='saved_models', help='path to save the model')
    parser.add_argument('--save', type=str, default='EXP', help='experiment name')
    parser.add_argument('--seed', type=int, default=0, help='random seed')
    parser.add_argument('--grad_clip', type=float, default=5, help='gradient clipping')
    parser.add_argument('--alpha', type=float, default=0.5, help='trade-off between ce loss and kd loss')
    parser.add_argument('--kd_temp', type=float, default=1.0, help='temperature in kd')

    # parser.add_argument('--cos_arch_lr', action='store_true', default=False, help='lr decay for learning rate')
    parser.add_argument('--num_layers', type=int, default=3, help='num of layers of GNN method.')
    parser.add_argument('--hidden_size', type=int, default=2048, help='default hidden_size in supernet')
    parser.add_argument('--save_path', type=str, default='./save_path', help='save path')
    parser.add_argument('--teacher_path', type=str, default='teacher_model', help='save teacher path')
    parser.add_argument('--model_path', type=str, default='student_model', help='path to save the model')
    parser.add_argument('--head', type=int, default=8, help='head nums for attention based model')
    parser.add_argument('--skip_train', type=str2bool, default=False, help='direct eval')
    args = parser.parse_args()
    return args

def get_tearcher_args():
    parser = argparse.ArgumentParser("Catalog search")
    parser.add_argument('--experiment_name', type=str, default='part_prediction', help='experiment_name')
    parser.add_argument('--catalog_name', type=str, default='catA', help='catalog name')
    parser.add_argument('--embedding_size', type=str, default='one_hot', help='embedding type')
    parser.add_argument('--data_location', type=str, default='./data/', help='data path')
    parser.add_argument('--dropout', type=float, default=0.3, help='dropout for model')
    parser.add_argument('--gnn_type', type=str, default='gatv2', help='gnn type')
    parser.add_argument('--embedding_keyword', type=str, default='embedding', help='data path')
    parser.add_argument('--record_time', action='store_true', default=False, help='used for run_with_record_time func')
    parser.add_argument('--batch_size', type=int, default=1024, help='batch size')
    parser.add_argument('--eval_batch_size', type=int, default=1024, help='eval batch size')
    parser.add_argument('--learning_rate', type=float, default=0.0005, help='init learning rate')
    parser.add_argument('--learning_rate_min', type=float, default=0.00005, help='min learning rate')
    parser.add_argument('--weight_decay', type=float, default=0.00002, help='weight decay')
    parser.add_argument('--gpu', type=int, default=1, help='gpu device id')
    parser.add_argument('--max_epochs', type=int, default=500, help='num of training epochs')
    # parser.add_argument('--model_path', type=str, default='saved_models', help='path to save the model')
    parser.add_argument('--save', type=str, default='EXP', help='experiment name')
    parser.add_argument('--seed', type=int, default=0, help='random seed')
    parser.add_argument('--grad_clip', type=float, default=5, help='gradient clipping')

    # parser.add_argument('--cos_arch_lr', action='store_true', default=False, help='lr decay for learning rate')
    parser.add_argument('--num_layers', type=int, default=3, help='num of layers of GNN method.')
    # parser.add_argument('--withoutjk', action='store_true', default=False, help='remove la aggregtor')
    parser.add_argument('--hidden_size', type=int, default=2048, help='default hidden_size in supernet')
    # in the stage of update theta.
    parser.add_argument('--save_path', type=str, default='./save_path', help='save path')
    parser.add_argument('--model_path', type=str, default='teacher_model', help='path to save the model')
    parser.add_argument('--head', type=int, default=8, help='head nums for attention based model')
    parser.add_argument('--skip_train', type=str2bool, default=False, help='direct eval')
    args = parser.parse_args()
    return args

def get_args():
    parser = argparse.ArgumentParser("Catalog search")
    parser.add_argument('--experiment_name', type=str, default='part_prediction', help='experiment_name')
    parser.add_argument('--catalog_name', type=str, default='catA', help='catalog name')
    parser.add_argument('--embedding_size', type=str, default='one_hot', help='embedding type')
    parser.add_argument('--data_location', type=str, default='./data/', help='data path')
    parser.add_argument('--dropout', type=float, default=0.3, help='dropout for model')

    # parser.add_argument('--model_type', type=str, default='gat', help='model type')

    parser.add_argument('--embedding_keyword', type=str, default='embedding', help='data path')
    parser.add_argument('--record_time', action='store_true', default=False, help='used for run_with_record_time func')
    parser.add_argument('--batch_size', type=int, default=1024, help='batch size')
    parser.add_argument('--eval_batch_size', type=int, default=1024, help='eval batch size')
    parser.add_argument('--learning_rate', type=float, default=0.001, help='init learning rate')
    parser.add_argument('--learning_rate_min', type=float, default=0.00005, help='min learning rate')
    parser.add_argument('--weight_decay', type=float, default=0.00002, help='weight decay')
    parser.add_argument('--gpu', type=int, default=1, help='gpu device id')
    parser.add_argument('--max_epochs', type=int, default=200, help='num of training epochs')
    # parser.add_argument('--model_path', type=str, default='saved_models', help='path to save the model')
    parser.add_argument('--save', type=str, default='EXP', help='experiment name')
    parser.add_argument('--seed', type=int, default=0, help='random seed')
    parser.add_argument('--grad_clip', type=float, default=5, help='gradient clipping')
    parser.add_argument('--epsilon', type=float, default=0.0, help='the explore rate in the gradient descent process')
    parser.add_argument('--train_portion', type=float, default=0.5, help='portion of training data')
    parser.add_argument('--unrolled', action='store_true', default=False, help='use one-step unrolled validation loss')
    parser.add_argument('--arch_learning_rate', type=float, default=0.001, help='learning rate for arch encoding')
    parser.add_argument('--arch_learning_rate_min', type=float, default=0.005, help='minimum learning rate for arch encoding')
    # parser.add_argument('--cos_arch_lr', action='store_true', default=False, help='lr decay for learning rate')
    parser.add_argument('--arch_weight_decay', type=float, default=0.005, help='weight decay for arch encoding')
    parser.add_argument('--with_conv_linear', type=str2bool, default=False, help=' in NAMixOp with linear op')
    parser.add_argument('--num_layers', type=int, default=3, help='num of layers of GNN method.')
    # parser.add_argument('--withoutjk', action='store_true', default=False, help='remove la aggregtor')
    parser.add_argument('--alpha_mode', type=str, default='valid_loss', help='how to update alpha', choices=['train_loss', 'valid_loss', 'valid_acc'])
    parser.add_argument('--hidden_size',  type=int, default=128, help='default hidden_size in supernet')
    parser.add_argument('--loc_mean', type=float, default=1.0, help='initial mean value to generate the location')
    parser.add_argument('--loc_std', type=float, default=0.1, help='initial std to generate the location')
    #in the stage of update theta.
    parser.add_argument('--temp', type=float, default=0.001, help=' temperature in gumble softmax.')
    parser.add_argument('--w_update_epoch', type=int, default=1, help='epoches in update W')
    parser.add_argument('--model_type', type=str, default='snas', help='how to update alpha', choices=['darts', 'snas', 'gcn', 'gat'])
    parser.add_argument('--save_path', type=str, default='./save_path', help='save path')
    parser.add_argument('--model_path', type=str, default='saved_models', help='path to save the model')
    parser.add_argument('--save_searched_file', type=str, default='search_arch.dat', help='arch dict for search')
    parser.add_argument('--exp_id', type=str, default='', help='arch dict for search')
    
    parser.add_argument('--readout_on', type=str2bool, default=True, help='is readout search')
    parser.add_argument('--agg_on',  type=str2bool, default=True, help='is agg search')
    # parser.add_argument('--merge_on', type=bool, default=True, help='is merge search')
    parser.add_argument('--fusion_on', type=str2bool, default=True, help='is fusion search')
    parser.add_argument('--select_on', type=str2bool, default=True, help='is select search, False will be a dense net')
    
    parser.add_argument('--readout_type', type=str, default="global_mean", help='is readout search')
    parser.add_argument('--agg_type',  type=str, default="gcn", help='is agg search')
    # parser.add_argument('--merge_on', type=bool, default=True, help='is merge search')
    parser.add_argument('--fusion_type', type=str, default='mean', help='is fusion search')
    parser.add_argument('--select_type', type=str, default='none', help='is select search, False will be a dense net')
    
    
    parser.add_argument('--skip_training', type=str2bool, default=True, help='skip training')
    args = parser.parse_args()
    return args

